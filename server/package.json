{
  "name": "server",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "start": "nodemon ./bin/www"
  },
  "dependencies": {
    "body-parser": "^1.19.0",
    "cookie-parser": "~1.4.4",
    "cors": "^2.8.5",
    "crypto": "^1.0.1",
    "debug": "~2.6.9",
    "express": "^4.19.2",
    "gridfs-stream": "^1.1.1",
    "http-errors": "~1.6.3",
    "jade": "^1.9.2",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^5.9.7",
    "morgan": "~1.9.1",
    "multer": "^1.4.2",
    "multer-gridfs-storage": "^1.3.0",
    "nodemon": "^2.0.7",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.0",
    "passport-local": "^1.0.0",
    "passport-local-mongoose": "^6.0.1",
    "path": "^0.12.7",
    "path-to-regexp": "^6.1.0"
  },
  "description": "This repository implements JWT, Passport Local and Passport local Mongoose to implement LMS\r  To signup, use localhost:3000/users/signup with name,role,username and password fields\r  To Signin, use localhost:3000/users/login with post and given username and password. Save the token that will be returned as a response\r  That token with be used as Authorization: brearer:token as header for subsequent request.\r  To create a user an admin, you have to manually go to DB and set admin field in users table or relevant user as true.",
  "main": "app.js",
  "keywords": [],
  "author": "",
  "license": "ISC"
}
